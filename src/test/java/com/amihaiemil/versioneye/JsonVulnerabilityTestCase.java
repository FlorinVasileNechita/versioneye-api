/**
 * Copyright (c) 2017, Mihai Emil Andronache
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation
 *  and/or other materials provided with the distribution.
 * Neither the name of the copyright holder nor the names of its
 *  contributors may be used to endorse or promote products derived from
 *  this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package com.amihaiemil.versioneye;

import java.util.List;

import javax.json.Json;
import javax.json.JsonObject;

import org.hamcrest.MatcherAssert;
import org.hamcrest.Matchers;
import org.junit.Test;

/**
 * Unit tests for {@link JsonVulnerability}.
 * @author Mihai Andronache (amihaiemil@gmail.com)
 * @version $Id$
 * @since 1.0.0
 */
public final class JsonVulnerabilityTestCase {
    
    /**
     * JsonVulnerability can return the language. 
     */
    @Test
    public void returnsLanguage() {
        final Vulnerability vln = new JsonVulnerability(
            Json.createObjectBuilder().add("language", "Ruby").build()
        );
        MatcherAssert.assertThat(vln.language(), Matchers.is("Ruby"));
    }
    
    /**
     * JsonVulnerability can return the name id.
     */
    @Test
    public void returnsNameId() {
        final Vulnerability vln = new JsonVulnerability(
            Json.createObjectBuilder().add("name_id", "nametest").build()
        );
        MatcherAssert.assertThat(vln.nameId(), Matchers.is("nametest"));
    }
    
    /**
     * JsonVulnerability can return the prod key. 
     */
    @Test
    public void returnsProdKey() {
        final Vulnerability vln = new JsonVulnerability(
            Json.createObjectBuilder().add("prod_key", "prod/key").build()
        );
        MatcherAssert.assertThat(vln.prodKey(), Matchers.is("prod/key"));
    }
    
    /**
     * JsonVulnerability can return the platform. 
     */
    @Test
    public void returnsPlatform() {
        final Vulnerability vln = new JsonVulnerability(
            Json.createObjectBuilder().add("platform", "Windows").build()
        );
        MatcherAssert.assertThat(vln.platform(), Matchers.is("Windows"));
    }
    
    /**
     * JsonVulnerability can return the framework. 
     */
    @Test
    public void returnsFramework() {
        final Vulnerability vln = new JsonVulnerability(
            Json.createObjectBuilder().add("framework", "Spring").build()
        );
        MatcherAssert.assertThat(vln.framework(), Matchers.is("Spring"));
    }
    
    /**
     * JsonVulnerability can return the description. 
     */
    @Test
    public void returnsDescription() {
        final Vulnerability vln = new JsonVulnerability(
            Json.createObjectBuilder().add("description", "testdesc").build()
        );
        MatcherAssert.assertThat(vln.description(), Matchers.is("testdesc"));
    }
    
    /**
     * JsonVulnerability can return the summary. 
     */
    @Test
    public void returnsSummary() {
        final Vulnerability vln = new JsonVulnerability(
            Json.createObjectBuilder().add("summary", "somesummary").build()
        );
        MatcherAssert.assertThat(vln.summary(), Matchers.is("somesummary"));
    }
    
    /**
     * JsonVulnerability can return the author. 
     */
    @Test
    public void returnsAuthor() {
        final Vulnerability vln = new JsonVulnerability(
            Json.createObjectBuilder().add("author", "amihaiemil").build()
        );
        MatcherAssert.assertThat(vln.author(), Matchers.is("amihaiemil"));
    }
    
    /**
     * JsonVulnerability can return the publish date. 
     */
    @Test
    public void returnsPublishDate() {
        final Vulnerability vln = new JsonVulnerability(
            Json.createObjectBuilder().add("publish_date", "21.04.2009").build()
        );
        MatcherAssert.assertThat(vln.publishDate(), Matchers.is("21.04.2009"));
    }
    
    /**
     * JsonVulnerability can return 0 affected version. 
     */
    @Test
    public void returnsZeroAffectedVersion() {
        final Vulnerability vln = new JsonVulnerability(
            Json.createObjectBuilder()
                .add("affected_versions", Json.createArrayBuilder())
                .build()
        );
        MatcherAssert.assertThat(vln.affectedVersions(), Matchers.hasSize(0));
    }
    
    /**
     * JsonVulnerability can return one affected version. 
     */
    @Test
    public void returnsOneAffectedVersion() {
        final Vulnerability vln = new JsonVulnerability(
            Json.createObjectBuilder()
                .add("affected_versions", Json.createArrayBuilder().add("1"))
                .build()
        );
        final List<String> affected = vln.affectedVersions();
        MatcherAssert.assertThat(affected, Matchers.hasSize(1));
        MatcherAssert.assertThat(affected.get(0), Matchers.is("1"));
    }
    
    /**
     * JsonVulnerability can return more affected version. 
     */
    @Test
    public void returnsMoreAffectedVersions() {
        final Vulnerability vln = new JsonVulnerability(
            Json.createObjectBuilder()
                .add(
                    "affected_versions",
                    Json.createArrayBuilder()
                        .add("1")
                        .add("2")
                        .add("3")
                    )
                .build()
        );
        final List<String> affected = vln.affectedVersions();
        MatcherAssert.assertThat(affected, Matchers.hasSize(3));
        MatcherAssert.assertThat(affected.get(0), Matchers.is("1"));
        MatcherAssert.assertThat(affected.get(1), Matchers.is("2"));
        MatcherAssert.assertThat(affected.get(2), Matchers.is("3"));
    }
    
    /**
     * JsonVulenrability returns the Json it has behind.
     */
    @Test
    public void returnsJson() {
        final JsonObject json = Json.createObjectBuilder()
            .add("some", "vulnerability")
            .add("jsonFormat", true)
            .build();
        final Vulnerability vln = new JsonVulnerability(json);
        MatcherAssert.assertThat(vln.json(), Matchers.equalTo(json));
    }
}
